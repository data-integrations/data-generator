/*
 * Copyright Â© 2020 Cask Data, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package io.cdap.plugin.datagen.generator;

import io.cdap.plugin.datagen.GeneratorContext;

/**
 * Generates ints in a regular sequence, but sometimes randomly generating a smaller subset of values.
 *
 * Skew percentage of the time, the number will be randomly chosen between the skew min and max.
 * The rest of the time, the number will be generated by adding a constant number to the current number.
 */
public class SequentialIntSkewedGenerator extends RandomGenerator<Integer> {
  private final Config config;
  private final SequentialIntGenerator sequence;

  public SequentialIntSkewedGenerator(Config config) {
    this.config = config;
    this.sequence = new SequentialIntGenerator(config);
  }

  @Override
  public void initialize(GeneratorContext context) {
    super.initialize(context);
    sequence.initialize(context);
  }

  @Override
  public Integer generate() {
    int val = sequence.generate();
    if (random.nextInt(100) < config.skewChance) {
      return randomService.nextInt(config.skewMin, config.skewMax);
    }
    return val;
  }

  /**
   * Config.
   */
  public static class Config extends SequentialIntGenerator.Config {
    private int skewMin;
    private int skewMax;
    private int skewChance;

    public Config() {
      this(1, 1, 0, 10, 10);
    }

    public Config(int start, int step, int skewMin, int skewMax, int skewChance) {
      super(start, step);
      this.skewMin = skewMin;
      this.skewMax = skewMax;
      this.skewChance = skewChance;
    }
  }
}
